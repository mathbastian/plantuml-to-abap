@startuml diagrama_C

    '7 Interfaces
    '9 Classes
    '2 Enumeradores

    title Diagrama C

    skinparam linetype ortho

    package Payroll {

    }

    interface lif_tax_calculator{
        +calculate( ) : void
    }
    class lcl_tax_calculator_a{
        +{static}make( io_payroll_context : if_hrpaypt_payroll_context ) : lif_tax_calculator
    }

    class lcl_tax_calculator implements lif_tax_calculator{
            -mo_payroll_context : if_hrpaypt_payroll_context
            -mt_wt_calc_rule[] : lif_wt_calc_rule
            +constructor( io_payroll_context : if_hrpaypt_payroll_context, it_wt_calc_rule[] : lif_wt_calc_rule )
    }

    interface lif_wt_calc_rule{
        + calculate( ) : pc207
    }

    class lcl_base_calculator implements lif_wt_calc_rule{
        -mo_payroll_context : if_hrpaypt_payroll_context
        -mo_base_getter_f : lif_base_getter_f
        -calculate( iv_base : maxbt ) : pc207
        +constructor( io_payroll_context : if_hrpaypt_payroll_context, io_base_getter_f : lif_base_getter_f )
    }

    interface lif_base_getter{
        get() : maxbt
    }
    class lcl_cumulation_base_getter implements lif_base_getter{
        -mo_payroll_context : if_hrpaypt_payroll_context
        + constructor( io_payroll_context : if_hrpaypt_payroll_context )
    }

    class lcl_limit_getter implements lif_base_getter{
        - mo_table_processor : lif_table_processor
        + constructor( io_table_processor : lif_table_processor )
    }

    interface lif_table_processor{
        + process( ) : maxbt
    }

    class lcl_table_processor implements lif_table_processor{
        -mo_base_full_hours : lif_base_calculation_rule
        - mo_payroll_context : if_hrpaypt_payroll_context
        + constructor( io_base_full_hours : lif_base_calculation_rule, io_payroll_context : if_hrpaypt_payroll_context )
    }

    interface lif_base_calculation_rule{
        + calculate( io_base_e : lif_base_e, is_current_overtime : PC2BF ) : void
    }

    class lcl_base_full_hours implements lif_base_calculation_rule{
        - mo_payroll_context : if_hrpaypt_payroll_context
        - mo_basic_hour_getter : lif_basic_hour_getter
        + constructor( io_payroll_context : if_hrpaypt_payroll_context, io_basic_hour_getter : lif_basic_hour_getter )
    }

    interface lif_basic_hour_getter{
        + get( ) : pc207
    }

    class lcl_basic_hour_getter implements lif_basic_hour_getter{
        - mo_payroll_context : if_hrpaypt_payroll_context
        +constructor( io_payroll_context : if_hrpaypt_payroll_context )
    }

    interface lif_base_e{
        +get_cumulator( ) : p_suml
        +get_base( ) : maxbt 
        +set_cumulator( iv_cumulator : p_suml ) : void
        +set_base( iv_base : maxbt ) : void
    }

    class lcl_base_e implements lif_base_e {
        - mv_cumulator : anhzl 
        - mv_base : maxbt
    }
        
    package enumerators as "enumerators"{
        enum lce_base{
            +gc_base_cumulator : 'BAOV'
        }
        enum lce_basic_hour{
            +gc_base_hour_identifier : 'HRAM'
        }
    }

    lcl_cumulation_base_getter--> lce_base : uses
    lcl_base_calculator--> lif_base_getter : uses
    lcl_limit_getter *-- "1..1" lif_table_processor : has
    lif_base_calculation_rule --> lif_base_e : use
    lcl_table_processor *-- "1..N" lif_base_calculation_rule : has
    lcl_basic_hour_getter --> lce_basic_hour : use
    lcl_base_full_hours *-- lif_basic_hour_getter : has
    lcl_tax_calculator  *-- "1..N" lif_wt_calc_rule : has
    Payroll --> lif_tax_calculator : uses
    Payroll --> lcl_tax_calculator_a : uses
    lcl_tax_calculator_a ..> lif_tax_calculator : returns
@enduml